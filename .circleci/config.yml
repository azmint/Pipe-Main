version: 2 # CircleCI 2.0 を使用します
jobs: # ステップの集合
  build: # Workflows を使用しない実行では、エントリポイントとして `build` ジョブが必要

    working_directory: ~/circleci-demo-java-spring # ステップが実行されるディレクトリ

    docker: # Docker でステップを実行します

      - image: circleci/openjdk:8-jdk-browsers # このイメージをすべての `steps` が実行されるプライマリコンテナとして使用します

    steps: # 実行可能コマンドの集合

      - checkout # ソースコードを作業ディレクトリにチェックアウトします

      - restore_cache: # 初回実行後、または `pom.xml` が変更されている場合に、保存されているキャッシュを復元します
          # 依存関係キャッシュについては https://circleci.com/docs/ja/2.0/caching/ をお読みください
          key: circleci-demo-java-spring-{{ checksum "pom.xml" }}

      - run: mvn dependency:go-offline # プロジェクトの依存関係を取得します

      - save_cache: # プロジェクトの依存関係を保存します
          paths:
            - ~/.m2
          key: circleci-demo-java-spring-{{ checksum "pom.xml" }}

      - run: mvn package # 実際のテストを実行します

      - store_test_results: # CircleCI ダッシュボードにテストメタデータを表示できるように、`target/surefire-reports` ディレクトリからアップロードします
          # テストサマリー (https://circleci.com/docs/ja/2.0/collect-test-data/) に表示するテスト結果をアップロードします
          path: target/surefire-reports

      - store_artifacts: # uberjar をアーティファクトとして保存します
          # アーティファクト (https://circleci.com/docs/ja/2.0/artifacts/) に表示するテストサマリーをアップロードします
          path: target/demo-java-spring-0.0.1-SNAPSHOT.jar
      # デプロイ例については https://circleci.com/docs/ja/2.0/deployment-integrations/ を参照してください
  deploy:
    machine:
      image: circleci/classic:edge
    steps:
      - checkout
      - run:
          name: "build docker image"
          # registry.heroku.com/${HEROKU_APP_NAME}/webは変更することは出来ません．
          command: docker build --rm=false -t registry.heroku.com/${HEROKU_APP_NAME}/web .
      - run:
          name: setup heroku command
          # CircleCIからHerokuへデプロイするためのスクリプトを実行
          command: bash .circleci/heroku_setup.sh
      - run:
          name: heroku maintenance on
          # Herokuのアプリをメンテナンス中にする
          command: heroku maintenance:on --app ${HEROKU_APP_NAME}
      - run:
          # HEROKU_AUTH_TOKEN is generated by `heroku auth:token`
          name: "push container to registry.heroku.com"
          # Herokuへログインし，作成したイメージをPush,Releaseします．
          command: |
            docker login --username=_ --password=$HEROKU_AUTH_TOKEN registry.heroku.com
            docker push registry.heroku.com/${HEROKU_APP_NAME}/web
            heroku container:push web --app ${HEROKU_APP_NAME}
            heroku container:release web --app ${HEROKU_APP_NAME}
      - run:
          name: heroku maintenance off
          # メンテナンスモードをオフにします．
          command: heroku maintenance:off --app ${HEROKU_APP_NAME}
workflows:
  version: 2
  build_and_deploy:
    jobs:
      # - build
      - deploy:
          # requires:
          #   - build
          filters:
            branches:
              only: master